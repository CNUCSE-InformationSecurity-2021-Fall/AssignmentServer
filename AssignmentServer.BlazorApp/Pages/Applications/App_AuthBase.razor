@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager navigationManager



@code {
    [Parameter]
    public string AssignmentId { get; set; }

    public StudentInfo CurrentStudent;

    protected T GetSubmitInfo<T>() where T : StudentSubmitRaw
    {
        var cabinetPath = $"Cabinet/Students/{CurrentStudent.Id}/Assignments/{AssignmentId}.json";

        if (!File.Exists(cabinetPath))
            return null;

        var cabinetJson = File.ReadAllText(cabinetPath);
        return JsonConvert.DeserializeObject<T>(cabinetJson);
    }

    protected void SubmitAssignment<T>(T submitInfo) where T : StudentSubmitRaw
    {
        if (submitInfo is null)
            return;

        T pivotObject = GetSubmitInfo<T>();

        if (pivotObject is not null)
        {
            pivotObject.Timestamp.Add(DateTime.Now);

            if (pivotObject.GetType() != typeof(StudentSubmitRaw))
            {
                var type = pivotObject.GetType();
                var pivotProperties = type.GetProperties();
                var submitRawTypeProperties = typeof(StudentSubmitRaw).GetProperties();

                var remains = pivotProperties
                                .Where(property =>
                                    !submitRawTypeProperties.Select(property => property.Name)
                                                           .Contains(property.Name))
                                .ToList();

                remains.ForEach(property => property.SetValue(pivotObject, property.GetValue(submitInfo)));
            }
        }
        else
        {
            pivotObject = submitInfo;
        }

        var cabinetPath = $"Cabinet/Students/{CurrentStudent.Id}/Assignments/{AssignmentId}.json";
        var submitData = JsonConvert.SerializeObject(pivotObject);
        File.WriteAllText(cabinetPath, submitData, Encoding.UTF8);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var action = new StudentContextAction(sessionStorage);
            var student = await action.Check();

            if (student is null)
                navigationManager.ToBaseRelativePath("/login");

            CurrentStudent = student;
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
