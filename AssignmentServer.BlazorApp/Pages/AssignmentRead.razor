@page "/assignment/{id}"
@inject ProtectedSessionStorage sessionStorage

<div class="assignment-container">
    @if (LoginStatus && AssignmentLoaded?.Valid == true)
    {
        <p class="small text-primary due-date">과제 제출 마감: @AssignmentLoaded.Due</p>
        <p class="small text-primary due-date">최근 제출 일시: @(AssignmentSubmit.LastSubmitDate?.ToString() ?? "미제출")</p>
        <h3>@AssignmentLoaded.Title</h3>


        @if (AssignmentLoaded.VideoExists)
        {
            <div class="assignment-video-container">
                <h4>실습 영상 다시보기</h4>
                <video controls>
                    <source src="@("/api/Content/VideoReview/" + AssignmentLoaded.Id)" />
                </video>
            </div>
            <div class="assignment-file-container">
                <span class="oi oi-video"></span>
                <a target="_blank" href="@("/api/Content/VideoReview/" + AssignmentLoaded.Id)">영상 다운로드</a>
            </div>
        }

        @if (AssignmentLoaded.PptExists)
        {
            <div class="assignment-file-container">
                <span class="oi oi-file"></span>
                <a target="_blank" href="@("/api/Content/PptReview/" + AssignmentLoaded.Id)">PPT 다운로드</a>
            </div>
        }

        <div class="assignment-detail-container">
            <h4>실습 상세</h4>
            @((MarkupString) AssignmentLoaded.Detail)
        </div>

        <h4>과제 제출</h4>

        @if (Application is not null)
        {
            @Application
        }
    }
    else
    {
        <h2>기다려도 안 나오나요?</h2>
        <h2>여긴 아무것도 없어요! 돌아가!</h2>
    }
</div>


@code {
    [Parameter]
    public string Id { get; set; }

    public bool LoginStatus { get; set; }
    public Assignment AssignmentLoaded { get; set; }
    public StudentSubmit AssignmentSubmit { get; set; }

    public bool Error { get; set; }

    public RenderFragment Application;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoginStatus = true;

            var action = new StudentContextAction(sessionStorage);
            var logged = await action.Check();

            if (logged is not null && logged.Valid)
            {
                AssignmentLoaded = new Assignment(Id);
                AssignmentSubmit = logged.AssignmentStatus
                                         .Where(assignment => assignment.Id == AssignmentLoaded.Id)
                                         .FirstOrDefault();

                if (AssignmentLoaded.Application is not null)
                {
                    var typeName = "AssignmentServer.BlazorApp.Pages." + AssignmentLoaded.Application;
                    var apptype = Type.GetType(typeName);

                    Application = builder =>
                    {
                        builder.OpenComponent(0, apptype);
                        builder.AddAttribute(1, "AssignmentId", AssignmentLoaded.Id);
                        builder.CloseComponent();
                    };
                }
            }
            else
            {
                LoginStatus = false;
            }

            StateHasChanged();
        }

        await base.OnInitializedAsync();
    }
}
