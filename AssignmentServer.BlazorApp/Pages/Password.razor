@page   "/password"

@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager       navManager
@inject IJSRuntime              JSRuntime

<EditForm Model="@formData" OnSubmit="OnSubmit">
    <div class="login-window">
        @if (errorState is not null)
        {
            <div class="alert alert-danger">@errorState</div>
        }
        <div class="card">
            <div class="card-header">비밀번호 변경</div>
            <div class="card-body">
                <div class="form-floating mb-3">
                    <InputText type="password" class="form-control" id="Password" placeholder="Password"
                               @bind-Value="formData.Password" />
                    <label for="Password">현재 비밀번호</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" class="form-control" id="NewPassword" placeholder="NewPassword"
                               @bind-Value="formData.NewPassword" />
                    <label for="NewPassword">새 비밀번호</label>
                </div>
                <div class="form-floating">
                    <InputText type="password" class="form-control" id="NewPasswordConfirm" placeholder="NewPasswordConfirm"
                               @bind-Value="formData.NewPasswordConfirm" />
                    <label for="NewPasswordConfirm">새 비밀번호 확인</label>
                </div>
            </div>
            <div class="card-footer d-flex align-content-end">
                <input class="btn btn-primary" type="submit" value="변경하기" />
            </div>
        </div>
    </div>
</EditForm>

@code {
    public PasswordChangeFormData formData = new PasswordChangeFormData();
    public string errorState;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var action = new StudentContextAction(sessionStorage);

            if (action.Check() is null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "로그인 해주세요!");
                navManager.NavigateTo("/", true);
            }

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnSubmit()
    {
        var action = new StudentContextAction(sessionStorage);
        var result = await action.UpdatePassword(formData);

        switch (result)
        {
            case PasswordChangeResultType.UserNotFound:
                errorState = "존재하지 않는 사용자입니다.";
                break;

            case PasswordChangeResultType.LoginRevoked:
                errorState = "로그인 상태가 유효하지 않습니다.";
                break;

            case PasswordChangeResultType.PasswordNotMatch:
                errorState = "기존 패스워드가 일치하지 않습니다.";
                break;

            case PasswordChangeResultType.ConfirmFailure:
                errorState = "새 패스워드가 일치하지 않습니다.";
                break;

            case PasswordChangeResultType.Success:
                await JSRuntime.InvokeVoidAsync("alert", "변경되었습니다! 다시 로그인해주세요.");
                await sessionStorage.DeleteAsync("Authorization");

                navManager.NavigateTo("/dashboard", true);
                break;
        }
    }
}