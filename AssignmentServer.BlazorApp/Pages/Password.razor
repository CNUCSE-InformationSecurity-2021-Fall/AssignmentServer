@page   "/password"

@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager       navManager
@inject IJSRuntime              JSRuntime

<EditForm Model="@formData" OnSubmit="OnSubmit">
    <div class="login-window">
        <div class="card">
            <div class="card-header">비밀번호 변경</div>
            <div class="card-body">
                <div class="form-floating mb-3">
                    <InputText type="text" class="form-control" id="Password" placeholder="Password"
                               @bind-Value="formData.Password" />
                    <label for="Password">현재 비밀번호</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" class="form-control" id="NewPassword" placeholder="NewPassword"
                               @bind-Value="formData.NewPassword" />
                    <label for="NewPassword">새 비밀번호</label>
                </div>
                <div class="form-floating">
                    <InputText type="password" class="form-control" id="NewPasswordConfirm" placeholder="NewPasswordConfirm"
                               @bind-Value="formData.NewPasswordConfirm" />
                    <label for="NewPasswordConfirm">새 비밀번호 확인</label>
                </div>
            </div>
            <div class="card-footer d-flex align-content-end">
                <input class="btn btn-primary" type="submit" value="변경하기" />
            </div>
        </div>
    </div>
</EditForm>

@code {
    public PasswordChangeFormData formData = new PasswordChangeFormData();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var client = new ApiClient(sessionStorage);
            var response = await client.Get("/api/student/check");
            var data = await response.Content.ReadAsStringAsync();

            if (string.IsNullOrEmpty(data)) {
                await JSRuntime.InvokeVoidAsync("alert", "로그인 해주세요!");
                navManager.NavigateTo("/", true);
            }

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnSubmit()
    {
        var client = new ApiClient(sessionStorage);
        var response = await client.Post("/api/student/updatepassword", formData);
        var data = await response.Content.ReadAsStringAsync();

        if (string.IsNullOrEmpty(data))
        {

        }
        else
        {

        }
    }
}